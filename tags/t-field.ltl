// _         _         _
  | |   __ _| |__  ___| |
  | |__/ _` | '_ \/ -_) |
  |____\__,_|_.__/\___|_|

  Nesting elements inside a label gives several benefits:
    * The label acts as a prompt, describing what data it expects.
    * Validation messages can appear inside the label.
    * Clicking a label gives focus to an element inside it.
    * Labels can be highlighted when active.

  @use ../styles/style.css
  @use ../styles/fonts.css
  @use ../styles/blocks.css

label ${label}

  // ___
    |_ _|__ ___ _ _
     | |/ _/ _ \ ' \
    |___\__\___/_||_|

  style = ''

  if icon
    a-icon(${icon})
    style = 'padding-left:40px!important;'

  else
    icon = type
    if type == 'startDate' || type == 'endDate'
      icon = (type == 'startDate' ? 'date' : 'range')
      type = 'date'

    if type == 'select' && values !== undefined
      type = 'multi'

    if type == 'multi'
      icon = 'select'

    if type == 'search' || type == 'email' || type == 'username' || type == 'password' || type == 'url' || type == 'select' || type == 'multi' || type == 'date'
      t-icon(${icon})

  // ___                _
    |_ _|_ _  _ __ _  _| |_
     | || ' \| '_ \ || |  _|
    |___|_||_| .__/\_,_|\__|
             |_|

  // Give inputs a sensible default width.
  width = width || (type == 'area' ? '100%' : '160px')

  if type == 'select' || type == 'multi' || type == 'radio' || type == 'checkbox'

    // Build a map of selected values.
    choices = choices || data
    selected = {}
    if values !== undefined
      for v in values
        if v
          selected[v] = choices[v]
      value = values
    else if value
      selected[value] = choices[value]

  // Prevent browser re-styling of a search input.
  if type == 'search'
    type = '_tatSearch'
    width = '1128px'

  // Email, username and password inputs have equal widths for login pages.
  if type == 'email' || type == 'username' || type == 'password'
    placeholder = placeholder || type
    width = '192px'

  // Make URL inputs very wide.
  if type == 'url'
    width = '1128px'

  // Make date inputs just the right size.
  if type == 'date'
    width = '128px'

  // A select field shows choices in a dropdown.
  if type == 'select' || type == 'multi'

    // Store the value in an input, to support form submission.
    input._tatSelect(name="${name}" value="${value}")

    // Show the selected choices.
    var._tatSelect(type="={type}")
      selectedCount = 0
      for key, item of selected
        selectedCount = selectedCount + 1
        if type == 'multi'
          a._tatSelected(value='${key}')
            t-icon(x)
            space
            if tag
              ={tag}(key='${key}') ${item}
            else
              : ${item}
        else
          if tag
            ={tag}(key='${key}') ${item}
          else
            : ${item}
      if !selectedCount
        b._tatPlaceholder(${icon}) ${placeholder}

    // Show the selectable/deselectable choices.
    ._tatContainer
      ._tatDrop
        for key, item of choices
          isSelected = selected[key]
          a._tatSelect(value='${key}')
            if isSelected
              t-icon(selected)
            if tag
              ={tag}(key='${key}') ${item}
            else
              : ${item}

  // A textarea does not use an input tag, but it is designed to look and feel
  // like a text input.
  else if type == 'area'
    textarea(name="${name}" placeholder="${placeholder}" style="width:${width}") ${value}

  // A button is clickable.
  else if type == 'button' || type == 'submit' || type == 'create' || type == 'delete'
    button(name="${name}" type="${type}") ${value || html}

  // A date field shows a calendar so you can select a date.
  // TODO: Date picker calendar.
  else if type == 'date'
    input._tatDate(name="${name}" value="${value}" placeholder="mm/dd/yy")
    ._tatContainer
      ._tatDrop

  // Show one or more checkboxes or radio buttons.
  else if type == 'checkbox' || type == 'radio'
    ._tatChoice
      for key, item of choices
        label._tatChoice
          value = selected[key]
          if selected[key]
            input._tatChoice(type="={type}" name="_${name}" value='${key}' checked)
            t-icon._tatSelected(={type})
          else
            input._tatChoice(type="={type}" name="_${name}" value='${key}')
            t-icon._tatSelect(={type})
            space
          if tag
            ={tag} ${item}
          else
            : ${item}
        if stacked === ''
          br


  // The default is to show a text input, optionally with an HTML5 type.
  else
    input(type="${type || 'text'}" name="${name}" value="${value}" placeholder="${placeholder}" style="width:${width};={style}") ={html}

// ___ _        _
  / __| |_ _  _| |___
  \__ \  _| || | / -_)
  |___/\__|\_, |_\___|
           |__/

  The t-field custom element adds a significant amount of CSS to the UI asset
  load in order to style most types of form fields.

+css

  /**
   * A Tat field contains one or more labels or form elements.
   */
  t-field {
    /* The field element acts as a container. */
    position: relative;
    /* Allow multiple fields on one line. */
    display: inline-block;
    vertical-align: top;
    margin: 0 4px 8px 0;
  }

  t-field[width="100%"] {
    display: block;
  }

  /**
   * A label appears above a form element.
   */
  t-field>label {
    /* Labels are less important than form data. */
    font-size: 14px;
    /* Light slate gray looks link-ish but unimportant. */
    color: #abc;
  }

  /**
   * When a label is hovered, its input should have slightly darker borders and text.
   */
  label:hover>input,
  label:hover>textarea,
  label:hover>var {
    border-color: #89a;
    color: #000;
  }
  label:hover {
    color: #89a;
  }

  /**
   * When a field is in focus, its label should be lit up.
   */
  label._tatLit {
    /* When lit, a label is slightly darker. */
    color: #26a;
  }

  /**
   * Form elements everywhere should have a common style.
   */
  button,
  input,
  textarea,
  /* A var acts as a non-editable form element. */
  var,
  /* A drop-down (or drop-up) shows an auto-hiding control. */
  /* This is used for selects, date pickers, color pickers, etc. */
  ._tatDrop,
  /* A button looks like a button, even if it's a link. */
  ._tatButton {
    border-radius: 4px;
    border: 1px solid #abc;
    padding: 6px 8px!important;
    background: #fff;
    color: #333;
    font-size: 18px;
    font-style: normal;
    outline: 0;
  }

  ::-webkit-input-placeholder {
    color: #c2c9cf;
  }

  :-moz-placeholder { /* Firefox 18- */
    color: #c2c9cf;
  }

  ::-moz-placeholder {  /* Firefox 19+ */
    color: #c2c9cf;
  }

  :-ms-input-placeholder {
    color: #c2c9cf;
  }

  /**
   * Form elements should appear below a lab.00el's text.
   */
  label>var,
  label>button,
  label>input,
  label>textarea,
  label>div {
    display: block;
  }

  /**
   * A container ilaels relatively positioned.
   */
  ._tatContainer {
    position: relative;
  }

  /**
   * A drop-down (or drop-up) appears above or below its form field.
   */
  ._tatDrop {
    position: absolute;
    display: none;
    list-style-type: none;
    top: -1px;
    z-index: 1;
  }

  /**
   * A drop-down can be opened.
   */
  div._tatOpen {
    display: block;
  }

  /**
   * When an input is focused, contrast increases and an outline appears.
   */
  input:focus,
  textarea:focus,
  button:focus,
  label._tatLit>var,
  a._tatButton {
    border-color: #26a!important;
    color: #000;
    box-shadow: 0 0 2px 4px rgba(34,102,170,0.1)!important;
  }

  /**
   * A button should look like a button (even if it's a link).
   */
  button,
  a._tatButton {
    border-color: #26a;
    box-shadow: #48c 0 1px 0 0 inset;
    background: #26a;
    text-shadow: #013 0 1px 0;
    color: #eef;
    font-weight: 600;
    cursor: pointer;
    padding: 4px 16px!important;
    width: auto;
  }

  /**
   * When a button is hovered or in focus, it should light up.
   */
  a._tatButton:hover,
  a._tatButton:focus,
  button:hover,
  button:focus {
    background: #48c;
    color: #fff;
  }

  /**
   * "Create" buttons are green.
   */
  button[type=create] {
    border-color: #080;
    box-shadow: #2a2 0 1px 0 0 inset;
    background: #090;
    text-shadow: #010 0 -1px 0;
    color: #efe;
  }
  button[type=create]:hover,
  button[type=create]:focus {
    background: #2a2;
    color: #fff;
  }

  /**
   * "Delete" buttons are red.
   */
  button[type=delete] {
    border-color: #800;
    box-shadow: #b33 0 1px 0 0 inset;
    background: #900;
    text-shadow: #100 0 -1px 0;
    color: #fee;
  }
  button[type=delete]:hover,
  button[type=delete]:focus {
    background: #b33;
    color: #fff;
  }

  /**
   * A select box or radio/checkbox's input is hidden, but focusable for tabbing.
   */
  input._tatChoice,
  input._tatSelect {
    position: absolute;
    opacity: 0.01;
    width: 1px;
    height: 1px;
  }

  /**
   * Some inputs must leave room for icons on the left.
   */
  input._tatDate,
  input[type=email],
  input[type=username],
  input[type=password],
  input[type=url],
  input[type=_tatSearch] {
    padding-left: 40px!important;
    width: 240px;
  }
  input._tatDate {
    width: 128px;
  }

  /**
   * An end date in a range should overlap the previous field.
   */
  t-field[type=endDate] {
    margin-left: -12px;
  }
  t-field[type=endDate] ._tatDate {
    border-left: 0;
    border-top-left-radius: 0;
    border-bottom-left-radius: 0;
  }

  /**
   * An icon can hover over an input.
   */
  t-field>label>t-icon,
  t-field>label>a-icon {
    position: absolute;
    left: 4px;
    bottom: 3px;
    opacity: 0.5;
  }

  /**
   * A select icon hovers over the right side of a select box.
   */
  t-icon[select],
  t-icon[multi] {
    left: auto;
    right: 4px!important;
    bottom: 6px;
    cursor: pointer;
  }

  label._tatLit>t-icon,
  label._tatLit>a-icon {
    opacity: 1;
  }

  var._tatSelect {
    padding-right: 28px!important;
    min-height: 36px;
  }

  var._tatSelect {
    -webkit-touch-callout: none;
    -webkit-user-select: none;
    -khtml-user-select: none;
    -moz-user-select: none;
    -ms-user-select: none;
    user-select: none;
  }

  ._tatDrop {
    max-height: 240px;
    overflow: auto;
    margin: 0!important;
    border-color: #26a!important;
    padding: 0!important;
    box-shadow: 0 2px 2px 2px rgba(34,102,170,0.1)!important;
  }

  a._tatSelect {
    position: relative;
    display: block;
    margin: 0!important;
    padding: 2px 8px 2px 24px!important;
    color: #666;
    white-space: nowrap;
    cursor: pointer;
  }
  a._tatSelect._tatLit {
    color: #000;
    background: #eef2ff;
    border-radius: 4px;
  }

  /**
   * A check mark hovers inside a select box list element.
   */
  a>t-icon[selected] {
    position: absolute;
    left: 4px!important;
    top: 6px!important;
  }
  a>t-icon[selected] {
    width: 16px;
    height: 16px;
  }

  /**
   * A selected item in a multi-select is seen as an inline block with an X.
   */
  var._tatSelect[type=multi] {
    padding: 0 24px 0 0!important;
  }
  a._tatSelected,
  var[type=multi]>b._tatPlaceholder {
    display: inline-block;
    white-space: nowrap;
    padding: 2px 8px 2px 4px!important;
    margin: 1px;
    border: 1px solid #eee;
    border-radius: 4px;
    font-weight: normal;
    color: #333;
    cursor: pointer;
  }
  a._tatSelected:hover {
    border-color: #ecc;
    color: #600;
  }
  a._tatSelected:hover>t-icon[x]>svg>path {
    stroke: #900;
    stroke-width: 28;
  }
  a._tatSelected>t-icon {
    display: inline-block;
    vertical-align: top;
    margin: 12px 0;
    font-size: 8px;
  }
  b._tatPlaceholder {
    color: #ccc!important;
    border-color: #fff!important;
    font-weight: normal;
  }
  var._tatSelect>*,
  a._tatSelect>* {
    display: inline-block;
    white-space: nowrap;
  }
  var._tatSelect>*>t-icon,
  a._tatSelect>*>t-icon {
    display: inline-block;
    vertical-align: top;
    margin: -0.125 8px 2px 0;
  }
  var._tatSelect>*>t-icon,
  a._tatSelect>*>t-icon {
    width: 24px;
    height: 24px;
  }

  /**
   * Checkboxes and radios are generically "choices".
   */
  label._tatChoice {
    display: inline-block;
    margin: 2px 4px 2px 0;
    padding: 4px 12px 4px 6px;
    color: #666;
    cursor: pointer;
    border: 1px solid transparent;
  }
  label._tatChoice._tatLit,
  label._tatChoice:hover {
    color: #012;
    background: #eef2ff;
    border-radius: 8px;
    border-color: #cdf;
  }
  t-icon[radio],
  t-icon[checkbox] {
    vertical-align: top;
    width: 24px;
    height: 24px;
    margin: -2px 0;
  }

// ___         _      _
  / __| __ _ _(_)_ __| |_
  \__ \/ _| '_| | '_ \  _|
  |___/\__|_| |_| .__/\__|
                |_|
+js
  (function () {

    // Reference Tat's element map, which points to active elements, etc.
    var elements = Tat._elements;

    Jymin.on('._tatDrop', 'mousedown', function (element, event) {
      Jymin.preventDefault(event);
    });

    // When anything under a label has focus, give it the "_tatLit" class.
    Jymin.on('label', 'focus,blur,mousedown,touchstart', function (label, event, element) {
      elements._litItem = 0;
      var isLit = event.type != 'blur';
      Jymin.flipClass(label, '_tatLit', isLit);

      // If something becomes lit, store field/label/input references.
      if (isLit) {
        elements._activeField = Jymin.getParent(label) || 0;
        elements._activeLabel = label || 0;
        elements._activeInput = Jymin.all(label, 'input,select,textarea,button')[0] || 0;
        elements._activeIndex = 0;

        // When a lit field has a drop-down, open the drop-down.
        Jymin.all(label, '._tatDrop', function (drop) {
          openDrop(drop);

          // If no item is already lit, highlight the first selected item,
          // or the first item if no item is selected.
          var lit = elements._litItem = Jymin.all(drop, '._tatLit')[0];
          if (!lit) {
            Jymin.all(drop, 't-icon', function (icon) {
              var selected = Jymin.getAttribute(icon, 'selected');
              var notSelected = !Jymin.isUndefined(selected);
              if (!notSelected) {
                lit = Jymin.getParent(icon);
                highlightItem(lit);
              }
              return notSelected;
            });
            if (!lit) {
              lit = Jymin.all(drop, 'a')[0];
              highlightItem(lit);
            }
          }
        })[0];
      }
      else {
        openDrop(0);
      }
    });

    // Update icons for radios or checkboxes.
    Jymin.on('input._tatChoice', 'change', function (input) {
      var field = Jymin.getParent(input, 't-field');
      elements._activeField = field;
      var activeValue = input.value;
      var values = [];
      Jymin.all(field, 'input', function (input) {
        if (input.checked) {
          values.push(input.value);
        }
      });
      field._update({value: values[0], values: values});
      focusInput(activeValue);
    });

    // On touch, open a select box.
    Jymin.on('var._tatSelect,t-icon', 'mousedown,touchstart,dragstart', function (element, event) {
      Jymin.preventDefault(event);
    });

    // Highlight an item (after un-highlighting the old one).
    function highlightItem(item) {
      var lit = elements._litItem;
      if (lit) {
        Jymin.removeClass(lit, '_tatLit');
      }
      if (item) {
        Jymin.addClass(item, '_tatLit');
        elements._litItem = item;
      }
    }

    // Open a drop-down menu.
    function openDrop(drop) {
      var field = elements._activeField;
      var open = elements._openDrop;
      if (open) {
        Jymin.removeClass(open, '_tatOpen');
      }
      if (drop) {
        Jymin.addClass(drop, '_tatOpen');
        elements._openDrop = drop;
      }
    }

    // Focus on an input.
    function focusInput(activeValue) {
      var field = elements._activeField;
      if (field) {
        Jymin.all(field, 'input', function (input) {
          if (Jymin.isUndefined(activeValue) || input.value == activeValue) {
            Jymin.focusElement(input);
          }
        });
      }
    }

    // When hovering on an item, light it up.
    Jymin.on('a._tatSelect', 'mouseover', highlightItem);

    // On untouch, select a select box's list item.
    Jymin.on('a._tatSelect,a._tatSelected', 'mouseup,touchend', selectItem);

    function selectItem(element) {
      var value = Jymin.getAttribute(element, 'value');
      var input = elements._activeInput;
      var field = elements._activeField;
      var parent = Jymin.getParent(element, 't-field');
      var trail = Jymin.getTrail(element, 't-field');

      if (field && (field == parent) && field._update) {
        var state = field._state;
        var values = state.values;
        var isMulti = (values !== undefined);
        if (isMulti) {
          var index = values.indexOf(value);
          if (index < 0) {
            values.push(value);
          }
          else {
            delete values[index];
          }
        }
        else {
          state.value = value;
        }
        field._update();
        if (isMulti) {
          setTimeout(function () {
            focusInput();
            openDrop(elements._openDrop);
          }, 0);
        }
      }
    }

    // On keydown, interact with any active form elements.
    Jymin.bind(document, 'keydown', function (element, event) {
      var code = event.keyCode;
      var open = elements._openDrop;
      var lit = elements._litItem;
      var index, increment, list;

      // If the escape key is pressed, hide a dropdown.
      if (code == 27) {
        openDrop(0);
      }

      // If the up/down keys are pressed, move up/down a list.
      if (code == 40 || code == 38) {
        if (lit) {
          openDrop(open);
          list = Jymin.all(open, 'a', function (a, i) {
            if (a == lit) {
              index = i;
              return false;
            }
          });
          length = list.length;
          increment = code - 39;
          index = (index + increment + length) % length;
          lit = list[index];
          highlightItem(lit);
          Jymin.preventDefault(event);
        }
      }

      // If the enter or space key is pressed, mimic a mousedown.
      if (code == 13 || code == 32) {
        if (lit) {
          Jymin.trigger(lit, 'mouseup');
          Jymin.preventDefault(event);
        }
      }
    });

  })();
